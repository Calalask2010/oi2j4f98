#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: Python Flask API + Vite dev server –¥–ª—è HireHand
–ó–∞–º–µ–Ω—è–µ—Ç Node.js Express —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
import subprocess
import threading
import time
import signal
import logging
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORT = int(os.getenv('PORT', 5000))
VITE_DEV_PORT = PORT + 1  # Vite –±—É–¥–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5001

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(
        host=os.getenv('PGHOST'),
        database=os.getenv('PGDATABASE'),
        user=os.getenv('PGUSER'),
        password=os.getenv('PGPASSWORD'),
        port=os.getenv('PGPORT', 5432)
    )

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS contact_messages (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT NOT NULL,
                message TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username TEXT NOT NULL UNIQUE,
                password TEXT NOT NULL
            )
        """)
        
        conn.commit()
        cursor.close()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route('/api/contact', methods=['POST'])
def submit_contact():
    try:
        data = request.get_json()
        
        if not data or not all(k in data for k in ['name', 'email', 'message']):
            return jsonify({
                'success': False,
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã'
            }), 400
        
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            INSERT INTO contact_messages (name, email, message)
            VALUES (%s, %s, %s)
            RETURNING id, name, email, message, created_at
        """, (data['name'], data['email'], data['message']))
        
        result = cursor.fetchone()
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info(f"üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {data['name']} ({data['email']})")
        
        return jsonify({
            'success': True,
            'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'id': result['id']
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({
            'success': False,
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/api/contact-messages', methods=['GET'])
def get_contact_messages():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT id, name, email, message, created_at
            FROM contact_messages
            ORDER BY created_at DESC
        """)
        
        messages = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return jsonify({
            'success': True,
            'messages': [dict(msg) for msg in messages]
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return jsonify({
            'success': False,
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'healthy',
        'service': 'HireHand Python API',
        'version': '1.0.0',
        'database': 'connected'
    })

# –ü—Ä–æ–∫—Å–∏ –¥–ª—è Vite dev server
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_frontend(path):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Vite dev server"""
    import requests
    try:
        vite_url = f"http://localhost:{VITE_DEV_PORT}/{path}"
        response = requests.get(vite_url, stream=True)
        return response.content, response.status_code, dict(response.headers)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ Vite: {e}")
        return "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 503

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.before_request
def log_request():
    if request.path.startswith('/api'):
        logger.info(f"üîó {request.method} {request.path}")

@app.after_request
def log_response(response):
    if request.path.startswith('/api'):
        logger.info(f"‚úÖ {request.method} {request.path} - {response.status_code}")
    return response

# –ó–∞–ø—É—Å–∫ Vite dev server
def start_vite_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Vite dev server"""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Vite dev server –Ω–∞ –ø–æ—Ä—Ç—É {VITE_DEV_PORT}")
        
        # –ó–∞–ø—É—Å–∫ Vite —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—Ç–∞
        cmd = ["npm", "run", "dev", "--", "--port", str(VITE_DEV_PORT), "--host", "0.0.0.0"]
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            env={**os.environ, 'VITE_PORT': str(VITE_DEV_PORT)}
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Vite
        time.sleep(5)
        
        if process.poll() is None:
            logger.info(f"‚úÖ Vite dev server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {VITE_DEV_PORT}")
        else:
            stdout, stderr = process.communicate()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Vite: {stderr.decode()}")
            
        return process
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Vite: {e}")
        return None

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ['PGHOST', 'PGDATABASE', 'PGUSER', 'PGPASSWORD']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        # –ó–∞–ø—É—Å–∫ Vite –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        vite_thread = threading.Thread(target=start_vite_server, daemon=True)
        vite_thread.start()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Vite
        time.sleep(3)
        
        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
        logger.info(f"üêç –ó–∞–ø—É—Å–∫–∞–µ–º HireHand Python API –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        logger.info(f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:{PORT}")
        logger.info(f"üîó API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: http://localhost:{PORT}/api")
        logger.info("‚≠ê –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ Python! ‚≠ê")
        
        app.run(
            host='0.0.0.0',
            port=PORT,
            debug=False,  # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            threaded=True,
            use_reloader=False  # –û—Ç–∫–ª—é—á–∞–µ–º reloader –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()